#version 460

layout(local_size_x=8, local_size_y=8, local_size_z=8) in;

layout(binding=14) buffer truchet_volume_buffer
{
    vec4 volume[];
};

uniform ivec3 u_volume_res;
uniform float u_time = 0.0;

float mod289(float x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 mod289(vec4 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x) {return mod289(((x * 34.0) + 1.0) * x);}
float noise(vec3 p)
{
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}

float line(float x)
{
    const float C = 0.25;
    const float W = 0.1;
    return smoothstep(C - W, C, x) * smoothstep(C + W, C, x);
}

float cell(vec3 uvw)
{
    float x = line(max(uvw.x, max(uvw.y, uvw.z)));
    uvw.x = 1.0 - uvw.x;
    float y = line(max(uvw.x, max(uvw.y, uvw.z)));
    uvw.y = 1.0 - uvw.y;
    float z = line(max(uvw.x, max(uvw.y, uvw.z)));
    uvw.z = 1.0 - uvw.z;
    float w = line(max(uvw.x, max(uvw.y, uvw.z)));
    return (x + y + z + w) * 0.05;
}

void main()
{
    uvec3 xyz = gl_LocalInvocationID.xyz + gl_WorkGroupID.xyz * gl_WorkGroupSize.xyz;
    vec3 uvw = vec3(xyz) / u_volume_res;

    ivec3 R = u_volume_res;
    uint i = xyz.x + xyz.y * R.x + xyz.z * R.x * R.y;

    const float SIZE = 16.0;

    uvw.y += u_time * 0.4;
    uvw = mod(uvw, 1.0);

    uvw *= SIZE;
    vec3 coord = floor(uvw);

    vec3 uvw0 = fract(uvw);
    vec3 uvw1 = uvw0;
    vec3 uvw2 = uvw0;
    vec3 uvw3 = uvw0;

    uvw1.x = 1.0 - uvw1.x;
    uvw2.y = 1.0 - uvw2.y;
    uvw3.z = 1.0 - uvw2.z;

    float x = noise(coord) < 0.5 ? 0.0 : 1.0;
    vec3 rgb = mix(vec3(0.008, 0.046, 0.056), vec3(0.094, 0.024, 0.038), x);
    rgb *= 0.15;

    rgb = clamp(rgb, 0.0, 1.0);
    volume[i] = vec4(rgb, 1.0);
}

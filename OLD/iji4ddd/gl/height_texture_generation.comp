#version 460

layout(local_size_x=8, local_size_y=8) in;

layout(binding=0) buffer bind_1
{
    float out_height[];
};

uniform uint u_width;
uniform uint u_height;

float rand(vec2 uv)
{
    return fract(sin(dot(uv.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

float fbm_noise(vec2 uv)
{
    vec2 iuv = floor(uv);

    float a = rand(iuv);
    float b = rand(iuv + vec2(1.0, 0.0));
    float c = rand(iuv + vec2(0.0, 1.0));
    float d = rand(iuv + vec2(1.0, 1.0));

    vec2 fuv = fract(uv);
    vec2 suv = fuv * fuv * (3.0 - 2.0 * fuv);
    return mix(a, b, suv.x) +
        (c - a) * suv.y * (1.0 - suv.x) +
        (d - b) * suv.x * suv.y;
}

uint xy_to_i(uvec2 xy)
{
    xy.x = min(max(xy.x, 0), u_width - 1);
    xy.y = min(max(xy.y, 0), u_height - 1);
    return xy.x + xy.y * u_width;
}

void main()
{
    const uvec2 WH = uvec2(u_width, u_height);
    const uvec2 xy = gl_LocalInvocationID.xy + gl_WorkGroupID.xy * gl_WorkGroupSize.xy;

    vec2 vxy = vec2(xy);
    vec2 uv = vxy / WH;

    float value = 0.0;
    float amplitude = 0.5;
    vec2 noise_uv = uv * 24.0;
    const int OCTAVES = 6;
    for (int i = 0; i < OCTAVES; i++)
    {
        value += fbm_noise(noise_uv) * amplitude;
        noise_uv *= 2.0;
        amplitude *= 0.5;
    }

    out_height[xy_to_i(xy)] = value;
}
